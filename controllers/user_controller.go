package controllers

import (
	"net/http"

	"github.com/Huong3203/APIPodcast/config"
	"github.com/Huong3203/APIPodcast/models"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
)

// ==========================
// üîπ GET /api/users/profile
// ==========================
func GetProfile(c *gin.Context) {
	userID := c.GetString("user_id")

	var user models.NguoiDung
	if err := config.DB.First(&user, "id = ?", userID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"})
		return
	}

	user.MatKhau = ""
	c.JSON(http.StatusOK, user)
}

// ==========================
// üîπ PUT /api/users/profile
// ==========================
type UpdateProfileInput struct {
	HoTen  string `json:"ho_ten" binding:"required"`
	Email  string `json:"email" binding:"required,email"`
	Avatar string `json:"avatar"` // ‚úÖ avatar, kh√¥ng b·∫Øt bu·ªôc
}

func UpdateProfile(c *gin.Context) {
	userID := c.GetString("user_id")

	var input UpdateProfileInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i (tr·ª´ user hi·ªán t·∫°i)
	var existingUser models.NguoiDung
	if err := config.DB.
		Where("email = ? AND id != ?", input.Email, userID).
		First(&existingUser).Error; err == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"})
		return
	}

	// T·∫°o map c·∫≠p nh·∫≠t
	updateData := map[string]interface{}{
		"ho_ten": input.HoTen,
		"email":  input.Email,
	}
	if input.Avatar != "" {
		updateData["avatar"] = input.Avatar
	}

	tx := config.DB.Model(&models.NguoiDung{}).
		Where("id = ?", userID).
		Updates(updateData)

	if tx.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"})
		return
	}

	if tx.Error != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "C·∫≠p nh·∫≠t th·∫•t b·∫°i"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng"})
}

// ==========================
// üîπ POST /api/users/change-password
// ==========================
type ChangePasswordInput struct {
	MatKhauCu  string `json:"mat_khau_cu" binding:"required"`
	MatKhauMoi string `json:"mat_khau_moi" binding:"required,min=6"`
}

func ChangePassword(c *gin.Context) {
	userID := c.GetString("user_id")

	var input ChangePasswordInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	var user models.NguoiDung
	if err := config.DB.First(&user, "id = ?", userID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"})
		return
	}

	// Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
	if err := bcrypt.CompareHashAndPassword([]byte(user.MatKhau), []byte(input.MatKhauCu)); err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng"})
		return
	}

	// Hash m·∫≠t kh·∫©u m·ªõi
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.MatKhauMoi), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ m√£ ho√° m·∫≠t kh·∫©u"})
		return
	}

	// C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
	if err := config.DB.Model(&user).Update("mat_khau", string(hashedPassword)).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"})
}

// ==========================
// üîπ GET /api/admin/users
// ==========================
// L·∫•y t·∫•t c·∫£ user (ch·ªâ admin)
func GetAllUsers(c *gin.Context) {
	role, _ := c.Get("vai_tro")
	if role != "admin" {
		c.JSON(http.StatusForbidden, gin.H{"error": "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p"})
		return
	}

	db := config.DB
	var users []models.NguoiDung

	if err := db.Find(&users).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng"})
		return
	}

	// ·∫®n m·∫≠t kh·∫©u tr∆∞·ªõc khi tr·∫£
	for i := range users {
		users[i].MatKhau = ""
	}

	c.JSON(http.StatusOK, gin.H{
		"total": len(users),
		"users": users,
	})
}
